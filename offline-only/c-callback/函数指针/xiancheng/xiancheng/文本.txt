Linux线程详解

置顶 小虾米_2018 2019-06-03 12:06:33  16849  收藏 151
分类专栏： Linux系统编程 文章标签： 线程
版权
并行和并发的区别
1. 并发(concurrency)：在操作系统中，是指一个时间段中有几个程序都处于已启动运行到运行完毕之间，且这几个程序都是在同一个处理机上运行。其中两种并发关系分别是同步和互斥。（并发是指同一时刻只能有一条指令执行，但多个进程指令被快速轮换执行，使得在宏观上有多个进程被同时执行的效果--宏观上并行，针对单核处理器）

互斥：进程间相互排斥的使用临界资源的现象，就叫互斥。
同步(synchronous)：进程之间的关系不是相互排斥临界资源的关系，而是相互依赖的关系。进一步的说明：就是前一个进程的输出作为后一个进程的输入，当第一个进程没有输出时第二个进程必须等待。具有同步关系的一组并发进程相互发送的信息称为消息或事件。（彼此有依赖关系的调用不应该同时发生，而同步就是阻止那些“同时发生”的事情）
其中并发又有伪并发和真并发，伪并发是指单核处理器的并发，真并发是指多核处理器的并发。
2.并行(parallelism)：在单处理器中多道程序设计系统中，进程被交替执行，表现出一种并发的外部特种；在多处理器系统中，进程不仅可以交替执行，而且可以重叠执行。在多处理器上的程序才可实现并行处理。从而可知，并行是针对多处理器而言的。并行是同时发生的多个并发事件，具有并发的含义，但并发不一定并行，也亦是说并发事件之间不一定要同一时刻发生。（同一时刻，有多条指令在多个处理器上同时执行--针对多核处理器）

同步和异步的区别
同步(synchronous)：进程之间的关系不是相互排斥临界资源的关系，而是相互依赖的关系。进一步的说明：就是前一个进程的输出作为后一个进程的输入，当第一个进程没有输出时第二个进程必须等待。具有同步关系的一组并发进程相互发送的信息称为消息或事件。
异步(asynchronous)：异步和同步是相对的，同步就是顺序执行，执行完一个再执行下一个，需要等待、协调运行。异步就是彼此独立,在等待某事件的过程中继续做自己的事，不需要等待这一事件完成后再工作。线程就是实现异步的一个方式。异步是让调用方法的主线程不需要同步等待另一线程的完成，从而可以让主线程干其它的事情。
线程概念
什么是线程

LWP：light weight process 轻量级的进程，本质仍是进程(在Linux环境下)
进程：独立地址空间，拥有PCB
线程：也有PCB，但没有独立的地址空间(共享)
区别：在于是否共享地址空间。 独居(进程)；合租(线程)。
Linux下： 线程：最小的执行单位，调度的基本单位。
进程：最小分配资源单位，可看成是只有一个线程的进程。
Linux内核线程实现原理

类Unix系统中，早期是没有“线程”概念的，80年代才引入，借助进程机制实现出了线程的概念。因此在这类系统中，进程和线程关系密切。

轻量级进程(light-weight process)，也有PCB，创建线程使用的底层函数和进程一样，都是clone。
从内核里看进程和线程是一样的，都有各自不同的PCB，但是PCB中指向内存资源的三级页表是相同的。
进程可以蜕变成线程
线程可看做寄存器和栈的集合
在linux下，线程最是小的执行单位；进程是最小的分配资源单位
察看LWP号：ps –Lf pid 查看指定线程的lwp号。
三级映射：进程PCB --> 页目录(可看成数组，首地址位于PCB中) --> 页表 --> 物理页面 --> 内存单元--参考：《Linux内核源代码情景分析》 ----毛德操

对于进程来说，相同的地址(同一个虚拟地址)在不同的进程中，反复使用而不冲突。原因是他们虽虚拟址一样，但，页目录、页表、物理页面各不相同。相同的虚拟址，映射到不同的物理页面内存单元，最终访问不同的物理页面。
但！线程不同！两个线程具有各自独立的PCB，但共享同一个页目录，也就共享同一个页表和物理页面。所以两个PCB共享一个地址空间。
实际上，无论是创建进程的fork，还是创建线程的pthread_create，底层实现都是调用同一个内核函数clone。
如果复制对方的地址空间，那么就产出一个“进程”；如果共享对方的地址空间，就产生一个“线程”。
因此：Linux内核是不区分进程和线程的。只在用户层面上进行区分。所以，线程所有操作函数 pthread_* 是库函数，而非系统调用。
线程共享资源

1.文件描述符表
2.每种信号的处理方式
3.当前工作目录
4.用户ID和组ID
5.内存地址空间 (.text/.data/.bss/heap/共享库)
线程非共享资源

1.线程id
2.处理器现场和栈指针(内核栈)
3.独立的栈空间(用户空间栈)
4.errno变量
5.信号屏蔽字
6.调度优先级
线程优、缺点

优点： 1. 提高程序并发性 2. 开销小 3. 数据通信、共享数据方便
缺点： 1. 库函数，不稳定 2. 调试、编写困难、gdb不支持 3. 对信号支持不好
优点相对突出，缺点均不是硬伤。Linux下由于实现方法导致进程、线程差别不是很大。
线程控制原语
pthread_self函数  获取线程ID。其作用对应进程中 getpid() 函数。

pthread_t pthread_self(void); 返回值：成功：0； 失败：无！
线程ID：pthread_t类型，本质：在Linux下为无符号整数(%lu)，其他系统中可能是结构体实现
线程ID是进程内部，识别标志。(两个进程间，线程ID允许相同)
注意：不应使用全局变量 pthread_t tid，在子线程中通过pthread_create传出参数来获取线程ID，而应使用pthread_self。
pthread_create函数  创建一个新线程。 其作用，对应进程中fork() 函数。

int pthread_create(pthread_t *thread, const pthread_attr_t *attr, void *(*start_routine) (void *), void *arg);
返回值：成功：0； 失败：错误号 -----Linux环境下，所有线程特点，失败均直接返回错误号。
参数：

pthread_t：当前Linux中可理解为：typedef  unsigned long int  pthread_t;
参数1：传出参数，保存系统为我们分配好的线程ID
参数2：通常传NULL，表示使用线程默认属性。若想使用具体属性也可以修改该参数。
参数3：函数指针，指向线程主函数(线程体)，该函数运行结束，则线程结束。
参数4：线程主函数执行期间所使用的参数，如要传多个参数, 可以用结构封装。
#include <stdio.h>
#include <pthread.h>
#include <unistd.h>
 
void *fun(void *arg)
{
	printf("I'm thread, Thread ID = %lu\n", pthread_self());
	return NULL;
}
 
int main(void)
{
	pthread_t tid;
 
	pthread_create(&tid, NULL, fun, NULL);
	sleep(1);      // 在多线程环境中，父线程终止，全部子线程被迫终止
	printf("I am main, my pid = %d\n", getpid());
 
	return 0;
}
运行结果



在一个线程中调用pthread_create()创建新的线程后，当前线程从pthread_create()返回继续往下执行，而新的线程所执行的代码由我们传给pthread_create的函数指针start_routine决定。start_routine函数接收一个参数，是通过pthread_create的arg参数传递给它的，该参数的类型为void *，这个指针按什么类型解释由调用者自己定义。start_routine的返回值类型也是void *，这个指针的含义同样由调用者自己定义。start_routine返回时，这个线程就退出了，其它线程可以调用pthread_join得到start_routine的返回值，类似于父进程调用wait(2)得到子进程的退出状态，稍后详细介绍pthread_join。
pthread_create成功返回后，新创建的线程的id被填写到thread参数所指向的内存单元。我们知道进程id的类型是pid_t，每个进程的id在整个系统中是唯一的，调用getpid(2)可以获得当前进程的id，是一个正整数值。线程id的类型是thread_t，它只在当前进程中保证是唯一的，在不同的系统中thread_t这个类型有不同的实现，它可能是一个整数值，也可能是一个结构体，也可能是一个地址，所以不能简单地当成整数用printf打印，调用pthread_self(3)可以获得当前线程的id。
练习：循环创建多个线程，每个线程打印自己是第几个被创建的线程。(类似于进程循环创建子进程)

#include <pthread.h>
#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
 
void *tfn(void *arg)
{
	int i;
 
	i = (int)arg;
	//i = *((int *)arg);
	sleep(i);	 //通过i来区别每个线程
	printf("I'm %dth thread, Thread_ID = %lu\n", i+1, pthread_self());
 
	return NULL;
}
 
int main(int argc, char *argv[])
{
	int n, i;
	pthread_t tid;
 
	if (argc == 2)
		n = atoi(argv[1]);
 
	for (i = 0; i < n; i++) 
	{
		pthread_create(&tid, NULL, tfn, (void *)i);  //将i转换为指针，在tfn中再强转回整形。
	}
	sleep(n);
	printf("I am main, and I am not a process, I'm a thread!\n" 
			"main_thread_ID = %lu\n", pthread_self());
 
	return 0;
}
运行结果



线程与共享  线程间共享全局变量！

【牢记】：线程默认共享数据段、代码段等地址空间，常用的是全局变量。而进程不共享全局变量，只能借助mmap。
设计程序，验证线程之间共享全局数据。

#include <stdio.h>
#include <pthread.h>
#include <stdlib.h>
#include <unistd.h>
 
int var = 100;
 
void *tfn(void *arg)
{
	var = 200;
	printf("thread\n");
 
	return NULL;
}
 
int main(void)
{
	printf("At first var = %d\n", var);
 
	pthread_t tid;
	pthread_create(&tid, NULL, tfn, NULL);
	sleep(1);
 
	printf("after pthread_create, var = %d\n", var);
 
	return 0;
}
运行结果



pthread_exit函数  将单个线程退出

void pthread_exit(void *retval); 参数：retval表示线程退出状态，通常传NULL
#include <pthread.h>
#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
 
void *tfn(void *arg)
{
	int i;
 
	i = (int)arg; //强转。
 
	if (i == 2)
		pthread_exit(NULL);
	sleep(i);	 //通过i来区别每个线程
 
	printf("I'm %dth thread, Thread_ID = %lu\n", i+1, pthread_self());
 
	return NULL;
}
 
int main(int argc, char *argv[])
{
	int n , i;
	pthread_t tid;
 
	if (argc == 2)
		n = atoi(argv[1]);
 
	for (i = 0; i < n; i++)
	{
		pthread_create(&tid, NULL, tfn, (void *)i);  //将i转换为指针，在tfn中再强转回整形。
	}
 
	sleep(n);
	printf("I am main, I'm a thread!\n" "main_thread_ID = %lu\n", pthread_self());
 
	return 0;
}
 
运行结果



思考：使用exit将指定线程退出，可以吗？ 结论：线程中，禁止使用exit函数，会导致进程内所有线程全部退出。

在不添加sleep控制输出顺序的情况下。pthread_create在循环中，几乎瞬间创建5个线程，但只有第1个线程有机会输出（或者第2个也有，也可能没有，取决于内核调度）如果第3个线程执行了exit，将整个进程退出了，所以全部线程退出了。
所以，多线程环境中，应尽量少用，或者不使用exit函数，取而代之使用pthread_exit函数，将单个线程退出。任何线程里exit导致进程退出，其他线程未工作结束，主控线程退出时不能return或exit。
另注意，pthread_exit或者return返回的指针所指向的内存单元必须是全局的或者是用malloc分配的，不能在线程函数的栈上分配，因为当其它线程得到这个返回指针时线程函数已经退出了。
pthread_join函数  阻塞等待线程退出，获取线程退出状态 其作用，对应进程中 waitpid() 函数。

int pthread_join(pthread_t thread, void **retval); 成功：0；失败：错误号
参数：thread：线程ID （【注意】：不是指针）；retval：存储线程结束状态。
#include <stdio.h>
#include <unistd.h>
#include <pthread.h>
#include <stdlib.h>
 
typedef struct
{
	int a;
	int b;
} exit_t;
 
void *tfn(void *arg)
{
	exit_t *ret;
	ret = malloc(sizeof(exit_t)); // malloc分配
 
	ret->a = 100;
	ret->b = 300;
 
	sleep(3);
	//pthread_exit((void *)ret);
	return (void *)ret;
}
 
	int main(void)
{
	pthread_t tid;
	exit_t *retval;
 
	pthread_create(&tid, NULL, tfn, NULL);
 
	/*调用pthread_join可以获取线程的退出状态*/
	pthread_join(tid, (void **)&retval);      //wait(&status);
	printf("a = %d, b = %d \n", retval->a, retval->b);
	return 0;
}
 
对比记忆：

进程中：main返回值、exit参数-->int；等待子进程结束 wait 函数参数-->int *
线程中：线程主函数返回值、pthread_exit-->void *；等待线程结束 pthread_join 函数参数-->void **
参数 retval 非空用法

调用该函数的线程将挂起等待，直到id为thread的线程终止。thread线程以不同的方法终止，通过pthread_join得到的终止状态是不同的，总结如下：

如果thread线程通过return返回，retval所指向的单元里存放的是thread线程函数的返回值。
如果thread线程被别的线程调用pthread_cancel异常终止掉，retval所指向的单元里存放的是常数PTHREAD_CANCELED。
如果thread线程是自己调用pthread_exit终止的，retval所指向的单元存放的是传给pthread_exit的参数。
如果对thread线程的终止状态不感兴趣，可以传NULL给retval参数。
练习：使用pthread_join函数将循环创建的多个子线程回收。

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <pthread.h>
 
int var = 100;
 
void *tfn(void *arg)
{
	int i;
	i = (int)arg;
    
	sleep(i);
	if (i == 1) 
	{
		var = 333;
		printf("var = %d\n", var);
		return (void *)var;
 
	}
	else if (i == 3) 
	{
		var = 777;
		printf("I'm %dth pthread, pthread_id = %lu\n var = %d\n", i+1, pthread_self(), var);
		pthread_exit((void *)var);
 
	} 
	else  
	{
		printf("I'm %dth pthread, pthread_id = %lu\n var = %d\n", i+1, pthread_self(), var);
		pthread_exit((void *)var);
	}
 
	return NULL;
}
 
int main(void)
{
	pthread_t tid[5];
	int i;
	int *ret[5];  
 
	for (i = 0; i < 5; i++)
		pthread_create(&tid[i], NULL, tfn, (void *)i);
 
	for (i = 0; i < 5; i++) 
	{
		pthread_join(tid[i], (void **)&ret[i]);
		printf("-------%d 's ret = %d\n", i, (int)ret[i]);
	}
        
	printf("I'm main pthread tid = %lu\t var = %d\n", pthread_self(), var);
 
	sleep(i);
	return 0;
}
 
运行结果



pthread_cancel函数  杀死(取消)线程 其作用，对应进程中 kill() 函数。

int pthread_cancel(pthread_t thread); 成功：0；失败：错误号
#include <stdio.h>
#include <unistd.h>
#include <pthread.h>
#include <stdlib.h>
 
void *tfn1(void *arg)
{
	printf("thread 1 returning\n");
	return (void *)111; 
}
 
void *tfn2(void *arg)
{
	printf("thread 2 exiting\n");
	pthread_exit((void *)222);
}
 
void *tfn3(void *arg)
{
	while (1) 
	{
		printf("thread 3: I'm going to die in 3 seconds ...\n");
		sleep(1);
 
		pthread_testcancel();	//自己添加取消点*/
	}
 
	return (void *)666;
}
 
int main(void)
{
	pthread_t tid;
	void *tret = NULL;
 
	pthread_create(&tid, NULL, tfn1, NULL);
	pthread_join(tid, &tret);
	printf("thread 1 exit code = %d\n\n", (int)tret);
 
	pthread_create(&tid, NULL, tfn2, NULL);                        
	pthread_join(tid, &tret);
	printf("thread 2 exit code = %d\n\n", (int)tret);
 
	pthread_create(&tid, NULL, tfn3, NULL);
	sleep(3);
	pthread_cancel(tid);
	pthread_join(tid, &tret);
	printf("thread 3 exit code = %d\n", (int)tret);
 
	return 0;
}
 
运行结果



线程的取消并不是实时的，而有一定的延时。需要等待线程到达某个取消点(检查点)。
类似于玩游戏存档，必须到达指定的场所(存档点，如：客栈、仓库、城里等)才能存储进度。杀死线程也不是立刻就能完成，必须要到达取消点。
取消点：是线程检查是否被取消，并按请求进行动作的一个位置。通常是一些系统调用creat，open，pause，close，read，write..... 执行命令man 7 pthreads可以查看具备这些取消点的系统调用列表。也可参阅 APUE.12.7 取消选项小节。
可粗略认为一个系统调用(进入内核)即为一个取消点。如线程中没有取消点，可以通过调用pthreestcancel函数自行设置一个取消点。
被取消的线程， 退出值定义在Linux的pthread库中。常数PTHREAD_CANCELED的值是-1。可在头文件pthread.h中找到它的定义：#define PTHREAD_CANCELED ((void *) -1)。因此当我们对一个已经被取消的线程使用pthread_join回收时，得到的返回值为-1。
pthread_detach函数  实现线程分离

int pthread_detach(pthread_t thread); 成功：0；失败：错误号
线程分离状态：指定该状态，线程主动与主控线程断开关系。线程结束后，其退出状态不由其他线程获取，而直接自己自动释放。网络、多线程服务器常用。
在线程被分离后，不能使用pthread_join等待它的终止状态。
进程若有该机制，将不会产生僵尸进程。僵尸进程的产生主要由于进程死后，大部分资源被释放，一点残留资源仍存于系统中，导致内核认为该进程仍存在。
也可使用 pthread_create函数参2(线程属性)来设置线程分离。
使用pthread_detach函数实现线程分离 

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <pthread.h>
 
void *tfn(void *arg)
{
	int n = 3;
 
	while (n--) 
	{
		printf("thread count %d\n", n);
		sleep(1);
}
 
	return (void *)1;
	//pthread_exit((void *)1);
}
 
int main(void)
{
	pthread_t tid;
	void *tret;
	int err;
 
#if 1
 
	pthread_attr_t attr;			/*通过线程属性来设置游离态*/
	pthread_attr_init(&attr);
	pthread_attr_setdetachstate(&attr,	PTHREAD_CREATE_DETACHED);
	pthread_create(&tid, &attr, tfn, NULL);
 
#else
 
	pthread_create(&tid, NULL, tfn, NULL);
	pthread_detach(tid);         //让线程分离  ----自动退出,无系统残留资源
 
#endif
 
	while (1) 
	{
		err = pthread_join(tid, &tret);
		printf("thread exit code = %d\n", (int)tret);
		printf("-------------err= %d\n", err);
		if (err != 0)
			fprintf(stderr, "thread_join error: %s\n\n", strerror(err));
		else
			fprintf(stderr, "thread exit code %d\n\n", (int)tret);
 
		sleep(1);
	}
 
	return 0;
}
运行结果



一般情况下，线程终止后，其终止状态一直保留到其它线程调用pthread_join获取它的状态为止。但是线程也可以被置为detach状态，这样的线程一旦终止就立刻回收它占用的所有资源，而不保留终止状态。不能对一个已经处于detach状态的线程调用pthread_join，这样的调用将返回EINVAL错误。也就是说，如果已经对一个线程调用了pthread_detach就不能再调用pthread_join了。
终止线程方式
总结：终止某个线程而不终止整个进程，有三种方法：

从线程主函数return。这种方法对主控线程不适用，从main函数return相当于调用exit。
一个线程可以调用pthread_cancel终止同一进程中的另一个线程。
线程可以调用pthread_exit终止自己。
控制原语对比
进程            线程

fork             pthread_create

exit             pthread_exit

wait            pthread_join

kill              pthread_cancel

getpid        pthread_self 命名空间
————————————————
版权声明：本文为CSDN博主「小虾米_2018」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。
原文链接：https://blog.csdn.net/qq_22847457/article/details/89371217